// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniHub.UniHubDbContext;

#nullable disable

namespace UniHub.Migrations
{
    [DbContext(typeof(UniHubContext))]
    partial class UniHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventsUser", b =>
                {
                    b.Property<Guid>("AttendeesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("AttendeesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventsUser");
                });

            modelBuilder.Entity("UniHub.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatorID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MemberCount")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("UniHub.Entities.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("int");

                    b.Property<Guid>("PostID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("ReplyComment")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("UniHub.Entities.Events", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssociatedClubs")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventImage")
                        .HasColumnType("longtext");

                    b.Property<Guid>("Host")
                        .HasColumnType("char(36)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UniHub.Entities.Likes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("UniHub.Entities.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("UniHub.Entities.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MediaUrls")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NoComments")
                        .HasColumnType("int");

                    b.Property<int?>("NoLikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visiblity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("UniHub.Entities.Repost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdditionalContent")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OriginalPostID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RepostUserID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPostID");

                    b.HasIndex("RepostUserID");

                    b.ToTable("Reposts");
                });

            modelBuilder.Entity("UniHub.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NoFollowers")
                        .HasColumnType("int");

                    b.Property<int?>("NoLikes")
                        .HasColumnType("int");

                    b.Property<int?>("NoPosts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UniversityID")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniHub.Entities.UserFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("UserUserFollow", b =>
                {
                    b.Property<Guid>("FollowersId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FollowersId1")
                        .HasColumnType("char(36)");

                    b.HasKey("FollowersId", "FollowersId1");

                    b.HasIndex("FollowersId1");

                    b.ToTable("UserUserFollow");
                });

            modelBuilder.Entity("EventsUser", b =>
                {
                    b.HasOne("UniHub.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniHub.Entities.Events", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniHub.Entities.Club", b =>
                {
                    b.HasOne("UniHub.Entities.User", "Users")
                        .WithMany("Clubs")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UniHub.Entities.Comments", b =>
                {
                    b.HasOne("UniHub.Entities.Posts", "Posts")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("UniHub.Entities.Likes", b =>
                {
                    b.HasOne("UniHub.Entities.Posts", "Posts")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniHub.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniHub.Entities.Notifications", b =>
                {
                    b.HasOne("UniHub.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniHub.Entities.Posts", b =>
                {
                    b.HasOne("UniHub.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniHub.Entities.Repost", b =>
                {
                    b.HasOne("UniHub.Entities.Posts", "Posts")
                        .WithMany("Reposts")
                        .HasForeignKey("OriginalPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniHub.Entities.User", "User")
                        .WithMany("Reposts")
                        .HasForeignKey("RepostUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniHub.Entities.User", b =>
                {
                    b.HasOne("UniHub.Entities.Club", null)
                        .WithMany("Members")
                        .HasForeignKey("ClubId");
                });

            modelBuilder.Entity("UserUserFollow", b =>
                {
                    b.HasOne("UniHub.Entities.UserFollow", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniHub.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniHub.Entities.Club", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("UniHub.Entities.Posts", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Reposts");
                });

            modelBuilder.Entity("UniHub.Entities.User", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Reposts");
                });
#pragma warning restore 612, 618
        }
    }
}
